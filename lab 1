#include <iostream>

using namespace std;

void ChangeIt_1(int n) {
 n = 5; 
} 

void ChangeIt_2(int *n) { 
 *n = 6; 
} 

void ChangeIt_3(int &n) { 
 n = 7; 

}

int ChangeIt_4(int n) { 
 n = 8;
 return n;
}

main(){
    
 int *p; //declare p as pointer
 int x=10, y=7, SIZE=5, data[SIZE]={1,3,2,5,4};
 p=&x; //reference of x
 
 ChangeIt_1(x); 
 cout << "ChangeIt_1 : " << *p << endl;
 
 ChangeIt_2(&x);
 cout << "ChangeIt_2 : " << *p << endl;
 
 ChangeIt_3(x);
 cout << "ChangeIt_3 : " << *p << endl;
 
 x = ChangeIt_4(x);
 cout << "ChangeIt_4 : " << *p << endl;
 



//1. Inspect the code and in your own interpretation, describe the reason call to function 
//   ChangeIt_1(n) will not change x in main()?
//2. Inspect the code and in your own interpretation, describe the reason parameter n in 
//   ChangeIt_2(int *n) is a pointer, and statement in the function is *n = 6 ? 
//3. Write a function called void swap with two parameters, which will receive the address
//   of x and y as pointer. The function should swap the value of x and y only if x is larger than 
//   y. Print the value of x and y after the function call.

void swap( int *num1, int *num2 )
{
   int temp;
   if(num2 > num1 || num1 > num2){
   
   temp = *num1;
   *num1 = *num2;
   *num2 = temp;
 }
 }

main(){
	int x =5, y = 10;
	swap( &x, &y );
	
	cout<<"Is the x ="<< x;
	cout<<" \n";
	cout<<"Is the y ="<< y;
	
}

//4. Write a function called double getAverage(int *array, int SIZE), where 
//   it accept the array as pointer, and return the average of the array. Print the returned 
//   value from this function. Always use *array rather than subscript to access the array value.

double getAverage(int *array, int SIZE) {
   int i, 
   sum = 100;       
   double *avg;          
   *avg = double(sum) / SIZE;
   return *avg;
}

}
